using Microsoft.Build.Framework;
using Microsoft.Build.Utilities;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace Blazor.BrowserExtension.Build.Tasks
{
    public class BlazorToBrowserExtensionWriteBackgroundWorkerFile : Task
    {
        private const string LogPrefix = "    ";

        public string BackgroundWorkerMainJsFilePath { get; set; }

        [Required]
        public ITaskItem[] JsAssets { get; set; }

        public string[] IncludeContentJsAssets { get; set; }

        public string ManifestFilePath { get; set; }

        [Required]
        public string FilePath { get; set; }

        public override bool Execute()
        {
            try
            {
                var jsImports = GetImports(JsAssets, IncludeContentJsAssets);
                if (string.IsNullOrEmpty(BackgroundWorkerMainJsFilePath))
                {
                    if (!string.IsNullOrEmpty(ManifestFilePath) && ManifestHasBackgroundWorker(ManifestFilePath))
                    {
                        Log.LogWarning($"{LogPrefix}Unable to find background worker main JS file generated by the analyzer. 'BackgroundWorker.js' generation is skipped.");
                        return true;
                    }

                    return true;
                }

                var backgroundWorkerContent = new StringBuilder();
                GenerateBackgroundWorkerContent(jsImports, BackgroundWorkerMainJsFilePath, backgroundWorkerContent);

                var directory = Path.GetDirectoryName(FilePath);
                if (!Directory.Exists(directory))
                {
                    Directory.CreateDirectory(directory);
                }

                File.WriteAllText(FilePath, backgroundWorkerContent.ToString());
                return true;
            }
            catch (Exception ex)
            {
                Log.LogError($"{LogPrefix}An unexpected error occurred when writing background worker file '{FilePath}'");
                Log.LogErrorFromException(ex);
                return false;
            }
        }

        private static List<string> GetImports(ITaskItem[] jsAssets, string[] includeContentJsAssets)
        {
            var allJsFiles = new HashSet<string>(StringComparer.OrdinalIgnoreCase);
            var includeContentJsFiles = new HashSet<string>(includeContentJsAssets, StringComparer.OrdinalIgnoreCase);
            foreach (var item in jsAssets)
            {
                var relativePath = GetRelativePath(item);
                if (!relativePath.StartsWith("content/") || includeContentJsFiles.Contains(relativePath))
                {
                    allJsFiles.Add(relativePath);
                }
            }

            return [.. allJsFiles.OrderBy(file =>
            {
                if (file.StartsWith("framework"))
                {
                    if (file.Contains("dotnet.js"))
                    {
                        return 0;
                    }
                    else if (file.Contains("dotnet"))
                    {
                        return 1;
                    }
                    else if (file.Contains("blazor.webassembly"))
                    {
                        return 2;
                    }

                    return 3;
                }
                else if (file.Contains("app.js"))
                {
                    return 5;
                }

                return 4;
            })];
        }

        private static string GetRelativePath(ITaskItem item)
        {
            var basePath = item.GetMetadata("BasePath");
            var relativePath = item.GetMetadata("RelativePath");
            return string.Join("/", Path.Combine(basePath, relativePath).Split(new[] { '/', '\\' }, StringSplitOptions.RemoveEmptyEntries).Select(part => part.TrimStart('_')));
        }

        private static bool ManifestHasBackgroundWorker(string manifestFilePath)
        {
            return File.Exists(manifestFilePath) && File.ReadAllText(manifestFilePath).Contains("content/BackgroundWorker.js");
        }

        private static void GenerateBackgroundWorkerContent(List<string> jsImports, string generatedBackgroundWorkerJsFilePath, StringBuilder backgroundWorkerContent)
        {
            backgroundWorkerContent.AppendLine("""
                import { importRequested, fromReference } from "/content/Blazor.BrowserExtension/BackgroundWorkerRunner.js";
                """);

            int index = 0;
            foreach (var import in jsImports)
            {
                backgroundWorkerContent.AppendLine($"""
                    import * as s{index++} from "/{import}";
                    """);
            }

            index = 0;
            backgroundWorkerContent.AppendLine();
            backgroundWorkerContent.Append("const allImports = [");
            foreach (var import in jsImports)
            {
                backgroundWorkerContent.Append($"""{(index == 0 ? null : ", ")}["{import}", s{index++}]""");
            }
            backgroundWorkerContent.AppendLine("];");

            backgroundWorkerContent.AppendLine("""

                const importModule = (requestedModulePath) => {
                  let candidateModule;
                  for (const [importedPath, importedModule] of allImports) {
                    if (requestedModulePath.includes(importedPath)) {
                      return importedModule;
                    } else if (importedPath.substring(importedPath.lastIndexOf('/')) === requestedModulePath.substring(requestedModulePath.lastIndexOf('/'))) {
                      candidateModule = importedModule;
                    }
                  }

                  if (candidateModule) {
                    return candidateModule;
                  }

                  console.warn("Unhandled module import: " + requestedModulePath);
                  return {};
                }

                globalThis.importProxy = (module) => Promise.resolve(importModule(module));
                for (const importRequest of importRequested) {
                  importRequest.resolve(importModule(importRequest.module));
                }

                """);

            var generatedContent = File.ReadAllText(generatedBackgroundWorkerJsFilePath);
            backgroundWorkerContent.AppendLine("// Generated by Blazor.BrowserExtension.Analyzer");
            backgroundWorkerContent.Append(generatedContent);
        }
    }
}
